"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createParser = void 0;
const core_1 = require("@babel/core");
const syntax_1 = require("../syntax");
const defaultPlugins = [
    'doExpressions',
    'objectRestSpread',
    'classProperties',
    'exportDefaultFrom',
    'exportNamespaceFrom',
    'asyncGenerators',
    'functionBind',
    'functionSent',
    'dynamicImport',
    'numericSeparator',
    'importMeta',
    'optionalCatchBinding',
    'optionalChaining',
    'classPrivateProperties',
    ['pipelineOperator', { proposal: 'minimal' }],
    'nullishCoalescingOperator',
    'bigInt',
    'throwExpressions',
    'logicalAssignment',
    'classPrivateMethods',
    'v8intrinsic',
    'partialApplication',
    ['decorators', { decoratorsBeforeExport: false }],
];
function createParser({ plugins: pluginsOverride }) {
    return async function parse(text, fileName) {
        const ast = await core_1.parseAsync(text, {
            parserOpts: {
                plugins: [...(pluginsOverride !== null && pluginsOverride !== void 0 ? pluginsOverride : defaultPlugins)],
            },
            filename: fileName,
            sourceType: 'module',
        });
        if (core_1.types.isProgram(ast)) {
            throw new Error(`Expected ${fileName} to contain a babel.types.file, but was a program`);
        }
        return {
            originFileName: fileName,
            rawContent: text,
            format: syntax_1.AstFormat.JS,
            root: ast,
        };
    };
}
exports.createParser = createParser;
//# sourceMappingURL=js-parser.js.map