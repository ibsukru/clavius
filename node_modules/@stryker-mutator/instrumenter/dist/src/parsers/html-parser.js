"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const syntax_helpers_1 = require("../util/syntax-helpers");
const syntax_1 = require("../syntax");
const parse_error_1 = require("./parse-error");
const TS_SCRIPT_TYPES = Object.freeze(['ts', 'text/typescript', 'typescript']);
const JS_SCRIPT_TYPES = Object.freeze(['js', 'text/javascript', 'javascript']);
/*
The parser implementation in this file is heavily based on prettier's html parser
https://github.com/prettier/prettier/blob/5a7162d0636a82c5862b9101b845af40918d22d1/src/language-html/parser-html.js
*/
async function parse(text, originFileName, context) {
    const root = await ngHtmlParser(text, originFileName, context);
    return {
        originFileName,
        rawContent: text,
        format: syntax_1.AstFormat.Html,
        root,
    };
}
exports.parse = parse;
async function ngHtmlParser(text, fileName, parserContext) {
    const { parse } = await Promise.resolve().then(() => __importStar(require('angular-html-parser')));
    const { RecursiveVisitor, visitAll } = await Promise.resolve().then(() => __importStar(require('angular-html-parser/lib/compiler/src/ml_parser/ast')));
    const { rootNodes, errors } = parse(text, {
        canSelfClose: true,
        allowHtmComponentClosingTags: true,
        isTagNameCaseSensitive: true,
    });
    if (errors.length !== 0) {
        throw new parse_error_1.ParseError(errors[0].msg, fileName, toSourceLocation(errors[0].span.start));
    }
    const scriptsAsPromised = [];
    visitAll(new (class extends RecursiveVisitor {
        visitElement(el, context) {
            const scriptFormat = getScriptType(el);
            if (scriptFormat) {
                scriptsAsPromised.push(parseScript(el, scriptFormat));
            }
            super.visitElement(el, context);
        }
    })(), rootNodes);
    const scripts = await Promise.all(scriptsAsPromised);
    const root = {
        scripts,
    };
    return root;
    async function parseScript(el, scriptFormat) {
        const content = text.substring(el.startSourceSpan.end.offset, el.endSourceSpan.start.offset);
        const ast = await parserContext.parse(content, fileName, scriptFormat);
        if (ast) {
            const offset = el.startSourceSpan.end;
            syntax_helpers_1.offsetLocations(ast.root, {
                position: offset.offset,
                column: offset.col,
                line: offset.line + 1,
            });
        }
        return ast;
    }
}
function toSourceLocation({ line, col }) {
    // Offset line with 1, since ngHtmlParser is 0-based
    return { line: line + 1, column: col };
}
function getScriptType(element) {
    var _a;
    if (element.name === 'script') {
        const containsSrc = element.attrs.some((attr) => attr.name === 'src');
        if (!containsSrc) {
            const type = (_a = element.attrs.find((attr) => attr.name === 'type')) !== null && _a !== void 0 ? _a : element.attrs.find((attr) => attr.name === 'lang');
            if (type) {
                const typeToLower = type.value.toLowerCase();
                if (TS_SCRIPT_TYPES.includes(typeToLower)) {
                    return syntax_1.AstFormat.TS;
                }
                if (JS_SCRIPT_TYPES.includes(typeToLower)) {
                    return syntax_1.AstFormat.JS;
                }
            }
            else {
                return syntax_1.AstFormat.JS;
            }
        }
    }
    return undefined;
}
//# sourceMappingURL=html-parser.js.map