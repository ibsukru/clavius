"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormat = exports.createParser = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const syntax_1 = require("../syntax");
const js_parser_1 = require("./js-parser");
const ts_parser_1 = require("./ts-parser");
const html_parser_1 = require("./html-parser");
function createParser(parserOptions) {
    const jsParse = js_parser_1.createParser(parserOptions);
    return function parse(code, fileName, formatOverride) {
        const format = getFormat(fileName, formatOverride);
        switch (format) {
            case syntax_1.AstFormat.JS:
                return jsParse(code, fileName);
            case syntax_1.AstFormat.TS:
                return ts_parser_1.parse(code, fileName);
            case syntax_1.AstFormat.Html:
                return html_parser_1.parse(code, fileName, { parse });
        }
    };
}
exports.createParser = createParser;
function getFormat(fileName, override) {
    if (override) {
        return override;
    }
    else {
        const ext = path_1.default.extname(fileName).toLowerCase();
        switch (ext) {
            case '.js':
            case '.jsx':
            case '.mjs':
            case '.cjs':
                return syntax_1.AstFormat.JS;
            case '.ts':
            case '.tsx':
                return syntax_1.AstFormat.TS;
            case '.vue':
            case '.html':
            case '.htm':
                return syntax_1.AstFormat.Html;
            default:
                throw new Error(`Unable to parse ${fileName}. No parser registered for ${ext}!`);
        }
    }
}
exports.getFormat = getFormat;
//# sourceMappingURL=index.js.map