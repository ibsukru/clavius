"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EqualityOperatorMutator = void 0;
const core_1 = require("@babel/core");
class EqualityOperatorMutator {
    constructor() {
        this.operators = {
            '<': ['<=', '>='],
            '<=': ['<', '>'],
            '>': ['>=', '<='],
            '>=': ['>', '<'],
            '==': ['!='],
            '!=': ['=='],
            '===': ['!=='],
            '!==': ['==='],
        };
        this.name = 'EqualityOperator';
    }
    mutate(path) {
        if (path.isBinaryExpression() && this.isSupported(path.node.operator)) {
            const mutatedOperators = this.operators[path.node.operator];
            return mutatedOperators.map((mutatedOperator) => {
                const replacement = core_1.types.cloneNode(path.node, false);
                replacement.operator = mutatedOperator;
                return {
                    original: path.node,
                    replacement,
                };
            });
        }
        return [];
    }
    isSupported(operator) {
        return Object.keys(this.operators).includes(operator);
    }
}
exports.EqualityOperatorMutator = EqualityOperatorMutator;
//# sourceMappingURL=equality-operator-mutator.js.map