"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.statementMutantPlacer = void 0;
const core_1 = require("@babel/core");
const syntax_helpers_1 = require("../util/syntax-helpers");
/**
 * Mutant placer that places mutants in statements that allow it.
 * It uses an `if` statement to do so
 */
const statementMutantPlacer = (path, mutants) => {
    if (path.isStatement()) {
        // First transform the mutated ast before we start to apply mutants.
        const appliedMutants = mutants.map((mutant) => ({
            mutant,
            ast: syntax_helpers_1.createMutatedAst(path, mutant),
        }));
        const instrumentedAst = appliedMutants.reduce(
        // Add if statements per mutant
        (prev, { ast, mutant }) => core_1.types.ifStatement(syntax_helpers_1.mutantTestExpression(mutant.id), core_1.types.blockStatement([ast]), prev), path.isBlockStatement()
            ? core_1.types.blockStatement([core_1.types.expressionStatement(syntax_helpers_1.mutationCoverageSequenceExpression(mutants)), ...path.node.body])
            : core_1.types.blockStatement([core_1.types.expressionStatement(syntax_helpers_1.mutationCoverageSequenceExpression(mutants)), path.node]));
        if (path.isBlockStatement()) {
            path.replaceWith(core_1.types.blockStatement([instrumentedAst]));
        }
        else {
            path.replaceWith(instrumentedAst);
        }
        return true;
    }
    else {
        return false;
    }
};
exports.statementMutantPlacer = statementMutantPlacer;
//# sourceMappingURL=statement-mutant-placer.js.map