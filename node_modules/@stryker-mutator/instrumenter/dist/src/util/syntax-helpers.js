"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isImportDeclaration = exports.isTypeNode = exports.mutationCoverageSequenceExpression = exports.createMutatedAst = exports.offsetLocations = exports.eqNode = exports.mutantTestExpression = exports.instrumentationBabelHeader = exports.ID = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@stryker-mutator/api/core");
Object.defineProperty(exports, "ID", { enumerable: true, get: function () { return core_1.INSTRUMENTER_CONSTANTS; } });
const core_2 = require("@babel/core");
const traverse_1 = tslib_1.__importDefault(require("@babel/traverse"));
const parser_1 = require("@babel/parser");
const STRYKER_NAMESPACE_HELPER = 'stryNS_9fa48';
const COVER_MUTANT_HELPER = 'stryCov_9fa48';
const IS_MUTANT_ACTIVE_HELPER = 'stryMutAct_9fa48';
/**
 * Returns syntax for the header if JS/TS files
 */
exports.instrumentationBabelHeader = parser_1.parse(`function ${STRYKER_NAMESPACE_HELPER}(){
  var g = new Function("return this")();
  var ns = g.${core_1.INSTRUMENTER_CONSTANTS.NAMESPACE} || (g.${core_1.INSTRUMENTER_CONSTANTS.NAMESPACE} = {});
  if (ns.${core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT} === undefined && g.process && g.process.env && g.process.env.${core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT_ENV_VARIABLE}) {
    ns.${core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT} = Number(g.process.env.${core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT_ENV_VARIABLE});
  }
  function retrieveNS(){
    return ns;
  }
  ${STRYKER_NAMESPACE_HELPER} = retrieveNS;
  return retrieveNS();
}
${STRYKER_NAMESPACE_HELPER}();

function ${COVER_MUTANT_HELPER}() {
  var ns = ${STRYKER_NAMESPACE_HELPER}();
  var cov = ns.${core_1.INSTRUMENTER_CONSTANTS.MUTATION_COVERAGE_OBJECT} || (ns.${core_1.INSTRUMENTER_CONSTANTS.MUTATION_COVERAGE_OBJECT} = { static: {}, perTest: {} });
  function cover() {
    var c = cov.static;
    if (ns.${core_1.INSTRUMENTER_CONSTANTS.CURRENT_TEST_ID}) {
      c = cov.perTest[ns.${core_1.INSTRUMENTER_CONSTANTS.CURRENT_TEST_ID}] = cov.perTest[ns.${core_1.INSTRUMENTER_CONSTANTS.CURRENT_TEST_ID}] || {};
    }
    var a = arguments;
    for(var i=0; i < a.length; i++){
      c[a[i]] = (c[a[i]] || 0) + 1;
    }
  }
  ${COVER_MUTANT_HELPER} = cover;
  cover.apply(null, arguments);
}
function ${IS_MUTANT_ACTIVE_HELPER}(id) {
  var ns = ${STRYKER_NAMESPACE_HELPER}();
  function isActive(id) {
    return ns.${core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT} === id;
  }
  ${IS_MUTANT_ACTIVE_HELPER} = isActive;
  return isActive(id);
}`).program.body;
/**
 * returns syntax for `global.activeMutant === $mutantId`
 * @param mutantId The id of the mutant to switch
 */
function mutantTestExpression(mutantId) {
    return core_2.types.callExpression(core_2.types.identifier(IS_MUTANT_ACTIVE_HELPER), [core_2.types.numericLiteral(mutantId)]);
}
exports.mutantTestExpression = mutantTestExpression;
function eqLocation(a, b) {
    function eqPosition(a, b) {
        return a.column === b.column && a.line === b.line;
    }
    return eqPosition(a.start, b.start) && eqPosition(a.end, b.end);
}
function eqNode(a, b) {
    return a.type === b.type && !!a.loc && !!b.loc && eqLocation(a.loc, b.loc);
}
exports.eqNode = eqNode;
function offsetLocations(file, { position, line, column }) {
    const offsetNode = (node) => {
        node.start += position;
        node.end += position;
        //  we need to subtract 1, as lines always start at 1
        node.loc.start.line += line - 1;
        node.loc.end.line += line - 1;
        if (node.loc.start.line === line) {
            node.loc.start.column += column;
        }
        if (node.loc.end.line === line) {
            node.loc.end.column += column;
        }
    };
    traverse_1.default(file, {
        enter(path) {
            offsetNode(path.node);
        },
    });
    // Don't forget the file itself!
    file.start += position;
    file.end += position;
}
exports.offsetLocations = offsetLocations;
function createMutatedAst(contextPath, mutant) {
    if (eqNode(contextPath.node, mutant.original)) {
        return mutant.replacement;
    }
    else {
        const mutatedAst = core_2.types.cloneNode(contextPath.node, /*deep*/ true);
        let isAstMutated = false;
        traverse_1.default(mutatedAst, {
            noScope: true,
            enter(path) {
                if (eqNode(path.node, mutant.original)) {
                    path.replaceWith(mutant.replacement);
                    path.stop();
                    isAstMutated = true;
                }
            },
        }, contextPath.scope);
        if (!isAstMutated) {
            throw new Error(`Could not apply mutant ${JSON.stringify(mutant.replacement)}.`);
        }
        return mutatedAst;
    }
}
exports.createMutatedAst = createMutatedAst;
/**
 * Returns a sequence of mutation coverage counters with an optional last expression.
 *
 * @example (global.__coverMutant__(0, 1), 40 + 2)
 * @param mutants The mutant ids for which covering syntax needs to be generated
 * @param targetExpression The original expression
 */
function mutationCoverageSequenceExpression(mutants, targetExpression) {
    const sequence = [
        core_2.types.callExpression(core_2.types.identifier(COVER_MUTANT_HELPER), mutants.map((mutant) => core_2.types.numericLiteral(mutant.id))),
    ];
    if (targetExpression) {
        sequence.push(targetExpression);
    }
    return core_2.types.sequenceExpression(sequence);
}
exports.mutationCoverageSequenceExpression = mutationCoverageSequenceExpression;
function isTypeNode(path) {
    return (path.isTypeAnnotation() ||
        flowTypeAnnotationNodeTypes.includes(path.node.type) ||
        tsTypeAnnotationNodeTypes.includes(path.node.type) ||
        isDeclareVariableStatement(path));
}
exports.isTypeNode = isTypeNode;
/**
 * Determines whether or not it is a declare variable statement node.
 * @example
 * declare const foo: 'foo';
 */
function isDeclareVariableStatement(path) {
    return path.isVariableDeclaration() && path.node.declare === true;
}
const tsTypeAnnotationNodeTypes = Object.freeze([
    'TSAsExpression',
    'TSInterfaceDeclaration',
    'TSTypeAnnotation',
    'TSTypeAliasDeclaration',
    'TSModuleDeclaration',
    'TSEnumDeclaration',
    'TSDeclareFunction',
    'TSTypeParameterInstantiation',
]);
const flowTypeAnnotationNodeTypes = Object.freeze([
    'DeclareClass',
    'DeclareFunction',
    'DeclareInterface',
    'DeclareModule',
    'DeclareModuleExports',
    'DeclareTypeAlias',
    'DeclareOpaqueType',
    'DeclareVariable',
    'DeclareExportDeclaration',
    'DeclareExportAllDeclaration',
    'InterfaceDeclaration',
    'OpaqueType',
    'TypeAlias',
    'InterfaceDeclaration',
]);
function isImportDeclaration(path) {
    return core_2.types.isTSImportEqualsDeclaration(path.node) || path.isImportDeclaration();
}
exports.isImportDeclaration = isImportDeclaration;
//# sourceMappingURL=syntax-helpers.js.map