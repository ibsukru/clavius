"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformBabel = void 0;
const core_1 = require("@babel/core");
// @ts-expect-error The babel types don't define "File" yet
const core_2 = require("@babel/core");
const mutant_placers_1 = require("../mutant-placers");
const mutators_1 = require("../mutators");
const syntax_helpers_1 = require("../util/syntax-helpers");
exports.transformBabel = ({ root, originFileName, rawContent }, mutantCollector, { options }) => {
    // Wrap the AST in a `new File`, so `nodePath.buildCodeFrameError` works
    // https://github.com/babel/babel/issues/11889
    const file = new core_2.File({ filename: originFileName }, { code: rawContent, ast: root });
    core_1.traverse(file.ast, {
        enter(path) {
            if (syntax_helpers_1.isTypeNode(path) || syntax_helpers_1.isImportDeclaration(path) || path.isDecorator()) {
                // Don't mutate type declarations or import statements
                path.skip();
            }
            else {
                mutators_1.mutate(path, options).forEach((mutant) => {
                    mutantCollector.add(originFileName, mutant);
                });
            }
        },
        exit(path) {
            const mutants = mutantCollector.findUnplacedMutantsInScope(path.node);
            if (mutant_placers_1.placeMutants(path, mutants, originFileName)) {
                path.skip();
                mutantCollector.markMutantsAsPlaced(mutants);
            }
        },
    });
    if (mutantCollector.hasPlacedMutants(originFileName)) {
        root.program.body.unshift(...syntax_helpers_1.instrumentationBabelHeader);
    }
};
//# sourceMappingURL=babel-transformer.js.map