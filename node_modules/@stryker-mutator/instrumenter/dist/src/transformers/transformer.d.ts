import { I } from '@stryker-mutator/util';
import { Ast, AstByFormat, AstFormat } from '../syntax';
import { TransformerOptions } from './transformer-options';
import { MutantCollector } from './mutant-collector';
/**
 * Transform the AST by generating mutants and placing them in the AST.
 * Supports all AST formats supported by Stryker.
 * @param ast The Abstract Syntax Tree
 * @param mutantCollector the mutant collector that will be used to register and administer mutants
 * @param transformerContext the options used during transforming
 */
export declare function transform(ast: Ast, mutantCollector: I<MutantCollector>, transformerContext: Pick<TransformerContext, 'options'>): void;
export declare type AstTransformer<T extends AstFormat> = (ast: AstByFormat[T], mutantCollector: I<MutantCollector>, context: TransformerContext) => void;
export interface TransformerContext {
    transform: AstTransformer<AstFormat>;
    options: TransformerOptions;
}
//# sourceMappingURL=transformer.d.ts.map