import { StrykerOptions } from '@stryker-mutator/api/core';
import { Logger } from '@stryker-mutator/api/logging';
import { PluginKind } from '@stryker-mutator/api/plugin';
import { MatchedMutant, MutantResult, mutationTestReportSchema, Reporter, SourceFile } from '@stryker-mutator/api/report';
import { PluginCreator } from '../di/plugin-creator';
import StrictReporter from './strict-reporter';
export default class BroadcastReporter implements StrictReporter {
    private readonly options;
    private readonly pluginCreator;
    private readonly log;
    static readonly inject: ["options", "pluginCreatorReporter", "logger"];
    readonly reporters: {
        [name: string]: Reporter;
    };
    constructor(options: StrykerOptions, pluginCreator: PluginCreator<PluginKind.Reporter>, log: Logger);
    private createReporter;
    private logAboutReporters;
    private broadcast;
    onSourceFileRead(file: SourceFile): void;
    onAllSourceFilesRead(files: SourceFile[]): void;
    onAllMutantsMatchedWithTests(results: readonly MatchedMutant[]): void;
    onMutantTested(result: MutantResult): void;
    onAllMutantsTested(results: MutantResult[]): void;
    onMutationTestReportReady(report: mutationTestReportSchema.MutationTestResult): void;
    wrapUp(): Promise<void>;
    private handleError;
}
//# sourceMappingURL=broadcast-reporter.d.ts.map