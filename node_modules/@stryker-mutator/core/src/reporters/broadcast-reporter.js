"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("@stryker-mutator/api/plugin");
const typed_inject_1 = require("typed-inject");
const di_1 = require("../di");
class BroadcastReporter {
    constructor(options, pluginCreator, log) {
        this.options = options;
        this.pluginCreator = pluginCreator;
        this.log = log;
        this.reporters = {};
        this.options.reporters.forEach((reporterName) => this.createReporter(reporterName));
        this.logAboutReporters();
    }
    createReporter(reporterName) {
        if (reporterName === 'progress' && !process.stdout.isTTY) {
            this.log.info('Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter');
            reporterName = 'progress-append-only';
        }
        this.reporters[reporterName] = this.pluginCreator.create(reporterName);
    }
    logAboutReporters() {
        const reporterNames = Object.keys(this.reporters);
        if (reporterNames.length) {
            if (this.log.isDebugEnabled()) {
                this.log.debug(`Broadcasting to reporters ${JSON.stringify(reporterNames)}`);
            }
        }
        else {
            this.log.warn("No reporter configured. Please configure one or more reporters in the (for example: reporters: ['progress'])");
        }
    }
    broadcast(methodName, eventArgs) {
        return Promise.all(Object.keys(this.reporters).map(async (reporterName) => {
            const reporter = this.reporters[reporterName];
            if (typeof reporter[methodName] === 'function') {
                try {
                    await reporter[methodName](eventArgs);
                }
                catch (error) {
                    this.handleError(error, methodName, reporterName);
                }
            }
        }));
    }
    onSourceFileRead(file) {
        this.broadcast('onSourceFileRead', file);
    }
    onAllSourceFilesRead(files) {
        this.broadcast('onAllSourceFilesRead', files);
    }
    onAllMutantsMatchedWithTests(results) {
        this.broadcast('onAllMutantsMatchedWithTests', results);
    }
    onMutantTested(result) {
        this.broadcast('onMutantTested', result);
    }
    onAllMutantsTested(results) {
        this.broadcast('onAllMutantsTested', results);
    }
    onMutationTestReportReady(report) {
        this.broadcast('onMutationTestReportReady', report);
    }
    async wrapUp() {
        await this.broadcast('wrapUp', undefined);
    }
    handleError(error, methodName, reporterName) {
        this.log.error(`An error occurred during '${methodName}' on reporter '${reporterName}'.`, error);
    }
}
exports.default = BroadcastReporter;
BroadcastReporter.inject = typed_inject_1.tokens(plugin_1.commonTokens.options, di_1.coreTokens.pluginCreatorReporter, plugin_1.commonTokens.logger);
//# sourceMappingURL=broadcast-reporter.js.map