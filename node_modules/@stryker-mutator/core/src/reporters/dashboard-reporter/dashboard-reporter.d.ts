import { StrykerOptions } from '@stryker-mutator/api/core';
import { Logger } from '@stryker-mutator/api/logging';
import { mutationTestReportSchema, Reporter } from '@stryker-mutator/api/report';
import { CIProvider } from '../ci/provider';
import DashboardReporterClient from './dashboard-reporter-client';
export default class DashboardReporter implements Reporter {
    private readonly log;
    private readonly dashboardReporterClient;
    private readonly options;
    private readonly ciProvider;
    static readonly inject: ["logger", "dashboardReporterClient", "options", "ciProvider"];
    constructor(log: Logger, dashboardReporterClient: DashboardReporterClient, options: StrykerOptions, ciProvider: CIProvider | null);
    private onGoingWork;
    onMutationTestReportReady(result: mutationTestReportSchema.MutationTestResult): void;
    wrapUp(): Promise<void>;
    private toReport;
    private update;
    private getContextFromEnvironment;
}
//# sourceMappingURL=dashboard-reporter.d.ts.map