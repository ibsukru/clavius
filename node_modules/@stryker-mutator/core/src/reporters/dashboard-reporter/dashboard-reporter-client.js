"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const net_utils_1 = require("../../utils/net-utils");
const object_utils_1 = require("../../utils/object-utils");
const tokens_1 = require("./tokens");
const STRYKER_DASHBOARD_API_KEY = 'STRYKER_DASHBOARD_API_KEY';
class DashboardReporterClient {
    constructor(log, httpClient, options) {
        this.log = log;
        this.httpClient = httpClient;
        this.options = options;
    }
    async updateReport({ report, projectName, version, moduleName, }) {
        const url = this.getPutUrl(projectName, version, moduleName);
        const serializedBody = JSON.stringify(report);
        this.log.info('PUT report to %s (~%s bytes)', url, serializedBody.length);
        const apiKey = object_utils_1.getEnvironmentVariable(STRYKER_DASHBOARD_API_KEY);
        if (apiKey) {
            this.log.debug('Using configured API key from environment "%s"', STRYKER_DASHBOARD_API_KEY);
        }
        this.log.trace('PUT report %s', serializedBody);
        const result = await this.httpClient.put(url, serializedBody, {
            ['X-Api-Key']: apiKey,
            ['Content-Type']: 'application/json',
        });
        const responseBody = await result.readBody();
        if (net_utils_1.isOK(result.message.statusCode || 0)) {
            const response = JSON.parse(responseBody);
            return response.href;
        }
        else if (result.message.statusCode === 401) {
            throw new util_1.StrykerError(`Error HTTP PUT ${url}. Unauthorized. Did you provide the correct api key in the "${STRYKER_DASHBOARD_API_KEY}" environment variable?`);
        }
        else {
            throw new util_1.StrykerError(`Error HTTP PUT ${url}. Response status code: ${result.message.statusCode}. Response body: ${responseBody}`);
        }
    }
    getPutUrl(repoSlug, version, moduleName) {
        const base = `${this.options.dashboard.baseUrl}/${repoSlug}/${encodeURIComponent(version)}`;
        if (moduleName) {
            return `${base}?module=${encodeURIComponent(moduleName)}`;
        }
        else {
            return base;
        }
    }
}
exports.default = DashboardReporterClient;
DashboardReporterClient.inject = plugin_1.tokens(plugin_1.commonTokens.logger, tokens_1.dashboardReporterTokens.httpClient, plugin_1.commonTokens.options);
//# sourceMappingURL=dashboard-reporter-client.js.map