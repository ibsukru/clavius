import { StrykerOptions } from '@stryker-mutator/api/core';
import { Logger } from '@stryker-mutator/api/logging';
import { MatchedMutant, MutantResult, mutationTestReportSchema, SourceFile } from '@stryker-mutator/api/report';
import StrictReporter from './strict-reporter';
export default class EventRecorderReporter implements StrictReporter {
    private readonly log;
    private readonly options;
    static readonly inject: ["logger", "options"];
    private readonly allWork;
    private readonly createBaseFolderTask;
    private index;
    constructor(log: Logger, options: StrykerOptions);
    private writeToFile;
    private format;
    private work;
    onSourceFileRead(file: SourceFile): void;
    onAllSourceFilesRead(files: SourceFile[]): void;
    onAllMutantsMatchedWithTests(results: readonly MatchedMutant[]): void;
    onMutantTested(result: MutantResult): void;
    onMutationTestReportReady(report: mutationTestReportSchema.MutationTestResult): void;
    onAllMutantsTested(results: MutantResult[]): void;
    wrapUp(): Promise<void[]>;
}
//# sourceMappingURL=event-recorder-reporter.d.ts.map