/// <reference types="node" />
import { StrykerOptions } from '@stryker-mutator/api/core';
import { Logger } from '@stryker-mutator/api/logging';
import { Disposable } from 'typed-inject';
export declare class TemporaryDirectory implements Disposable {
    private readonly log;
    private readonly temporaryDirectory;
    private isInitialized;
    removeDuringDisposal: boolean;
    static readonly inject: ["logger", "options"];
    constructor(log: Logger, options: StrykerOptions);
    initialize(): void;
    /**
     * Creates a new random directory with the specified prefix.
     * @param prefix The prefix.
     * @returns The path to the directory.
     */
    createRandomDirectory(prefix: string): string;
    /**
     * Copies a file.
     * @param fromFilename The path to the existing file.
     * @param toFilename The path to copy the file to.
     * @param instrumenter An optional additional instrumenter to stream the file through
     * @returns A promise to eventually copy the file.
     */
    copyFile(fromFilename: string, toFilename: string, instrumenter: NodeJS.ReadWriteStream | null): Promise<void>;
    /**
     * Deletes the Stryker-temp directory
     */
    dispose(): Promise<void>;
    /**
     * Creates a random integer number.
     * @returns A random integer.
     */
    random(): number;
}
//# sourceMappingURL=temporary-directory.d.ts.map