"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.padLeft = exports.kill = exports.base64Decode = exports.setExitCode = exports.isWarningEnabled = exports.getEnvironmentVariableOrThrow = exports.getEnvironmentVariable = exports.wrapInClosure = exports.deserialize = exports.serialize = void 0;
const treeKill = require("tree-kill");
const util_1 = require("@stryker-mutator/util");
var surrial_1 = require("surrial");
Object.defineProperty(exports, "serialize", { enumerable: true, get: function () { return surrial_1.serialize; } });
Object.defineProperty(exports, "deserialize", { enumerable: true, get: function () { return surrial_1.deserialize; } });
function wrapInClosure(codeFragment) {
    return `
    (function (window) {
      ${codeFragment}
    })((Function('return this'))());`;
}
exports.wrapInClosure = wrapInClosure;
/**
 * A wrapper around `process.env` (for testability)
 */
function getEnvironmentVariable(nameEnvironmentVariable) {
    return process.env[nameEnvironmentVariable];
}
exports.getEnvironmentVariable = getEnvironmentVariable;
function getEnvironmentVariableOrThrow(name) {
    const value = getEnvironmentVariable(name);
    if (value === undefined) {
        throw new util_1.StrykerError(`Missing environment variable "${name}"`);
    }
    else {
        return value;
    }
}
exports.getEnvironmentVariableOrThrow = getEnvironmentVariableOrThrow;
function isWarningEnabled(warningType, warningOptions) {
    if (typeof warningOptions === 'boolean') {
        return warningOptions;
    }
    else {
        return !!warningOptions[warningType];
    }
}
exports.isWarningEnabled = isWarningEnabled;
/**
 * A wrapper around `process.exitCode = n` (for testability)
 */
function setExitCode(n) {
    process.exitCode = n;
}
exports.setExitCode = setExitCode;
function base64Decode(base64EncodedString) {
    return Buffer.from(base64EncodedString, 'base64').toString('utf8');
}
exports.base64Decode = base64Decode;
function kill(pid) {
    return new Promise((res, rej) => {
        treeKill(pid, 'SIGKILL', (err) => {
            if (err && !canIgnore(err.code)) {
                rej(err);
            }
            else {
                res();
            }
        });
        function canIgnore(code) {
            // https://docs.microsoft.com/en-us/windows/desktop/Debug/system-error-codes--0-499-
            // these error codes mean the program is _already_ closed.
            return code === 255 || code === 128;
        }
    });
}
exports.kill = kill;
function padLeft(input) {
    return input
        .split('\n')
        .map((str) => '\t' + str)
        .join('\n');
}
exports.padLeft = padLeft;
//# sourceMappingURL=object-utils.js.map