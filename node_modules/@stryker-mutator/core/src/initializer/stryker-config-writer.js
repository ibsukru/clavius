"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const command_test_runner_1 = require("../test-runner/command-test-runner");
const _1 = require(".");
const STRYKER_JS_CONFIG_FILE = 'stryker.conf.js';
const STRYKER_JSON_CONFIG_FILE = 'stryker.conf.json';
class StrykerConfigWriter {
    constructor(log, out) {
        this.log = log;
        this.out = out;
    }
    guardForExistingConfig() {
        this.checkIfConfigFileExists(STRYKER_JS_CONFIG_FILE);
        this.checkIfConfigFileExists(STRYKER_JSON_CONFIG_FILE);
    }
    checkIfConfigFileExists(file) {
        if (fs_1.existsSync(file)) {
            const msg = `Stryker config file "${file}" already exists in the current directory. Please remove it and try again.`;
            this.log.error(msg);
            throw new Error(msg);
        }
    }
    /**
     * Create config based on the chosen framework and test runner
     * @function
     */
    write(selectedTestRunner, selectedReporters, selectedPackageManager, additionalPiecesOfConfig, exportAsJson) {
        const configObject = {
            packageManager: selectedPackageManager.name,
            reporters: selectedReporters.map((rep) => rep.name),
            testRunner: selectedTestRunner.name,
            coverageAnalysis: command_test_runner_1.default.is(selectedTestRunner.name) ? 'off' : 'perTest',
        };
        Object.assign(configObject, ...additionalPiecesOfConfig);
        return this.writeStrykerConfig(configObject, exportAsJson);
    }
    /**
     * Create config based on the chosen preset
     * @function
     */
    async writePreset(presetConfig, exportAsJson) {
        const config = Object.assign({ _comment: `This config was generated using a preset. Please see the handbook for more information: ${presetConfig.handbookUrl}` }, presetConfig.config);
        return this.writeStrykerConfig(config, exportAsJson);
    }
    writeStrykerConfig(config, exportAsJson) {
        if (exportAsJson) {
            return this.writeJsonConfig(config);
        }
        else {
            return this.writeJsConfig(config);
        }
    }
    async writeJsConfig(commentedConfig) {
        this.out(`Writing & formatting ${STRYKER_JS_CONFIG_FILE}...`);
        const rawConfig = this.stringify(commentedConfig);
        const formattedConfig = `/**
      * @type {import('@stryker-mutator/api/core').StrykerOptions}
      */
      module.exports = ${rawConfig};`;
        await fs_1.promises.writeFile(STRYKER_JS_CONFIG_FILE, formattedConfig);
        try {
            await util_1.childProcessAsPromised.exec(`npx prettier --write ${STRYKER_JS_CONFIG_FILE}`);
        }
        catch (error) {
            this.log.debug('Prettier exited with error', error);
            this.out('Unable to format stryker.conf.js file for you. This is not a big problem, but it might look a bit messy ðŸ™ˆ.');
        }
        return STRYKER_JS_CONFIG_FILE;
    }
    async writeJsonConfig(commentedConfig) {
        this.out(`Writing & formatting ${STRYKER_JSON_CONFIG_FILE}...`);
        const typedConfig = Object.assign({ $schema: './node_modules/@stryker-mutator/core/schema/stryker-schema.json' }, commentedConfig);
        const formattedConfig = this.stringify(typedConfig);
        await fs_1.promises.writeFile(STRYKER_JSON_CONFIG_FILE, formattedConfig);
        return STRYKER_JSON_CONFIG_FILE;
    }
    stringify(input) {
        return JSON.stringify(input, undefined, 2);
    }
}
exports.default = StrykerConfigWriter;
StrykerConfigWriter.inject = plugin_1.tokens(plugin_1.commonTokens.logger, _1.initializerTokens.out);
//# sourceMappingURL=stryker-config-writer.js.map