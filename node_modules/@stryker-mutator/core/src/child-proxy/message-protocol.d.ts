import { StrykerOptions } from '@stryker-mutator/api/core';
import { LoggingClientContext } from '../logging';
export declare enum WorkerMessageKind {
    'Init' = 0,
    'Call' = 1,
    'Dispose' = 2
}
export declare enum ParentMessageKind {
    'Initialized' = 0,
    'Result' = 1,
    'Rejection' = 2,
    'DisposeCompleted' = 3
}
export declare type WorkerMessage = InitMessage | CallMessage | DisposeMessage;
export declare type ParentMessage = WorkResult | {
    kind: ParentMessageKind.Initialized | ParentMessageKind.DisposeCompleted;
} | RejectionResult;
export declare const autoStart = "childProcessAutoStart12937129s7d";
export interface InitMessage {
    kind: WorkerMessageKind.Init;
    loggingContext: LoggingClientContext;
    options: StrykerOptions;
    workingDirectory: string;
    requireName: string;
    requirePath: string;
    additionalInjectableValues: unknown;
}
export interface DisposeMessage {
    kind: WorkerMessageKind.Dispose;
}
export interface WorkResult {
    kind: ParentMessageKind.Result;
    correlationId: number;
    result: any;
}
export interface RejectionResult {
    kind: ParentMessageKind.Rejection;
    correlationId: number;
    error: string;
}
export interface CallMessage {
    correlationId: number;
    kind: WorkerMessageKind.Call;
    args: any[];
    methodName: string;
}
//# sourceMappingURL=message-protocol.d.ts.map