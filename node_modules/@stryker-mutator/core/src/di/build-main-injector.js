"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPluginResolverProvider = exports.buildMainInjector = void 0;
const execa = require("execa");
const core_1 = require("@stryker-mutator/api/core");
const plugin_1 = require("@stryker-mutator/api/plugin");
const config_1 = require("../config");
const config_reader_1 = require("../config/config-reader");
const broadcast_reporter_1 = require("../reporters/broadcast-reporter");
const temporary_directory_1 = require("../utils/temporary-directory");
const timer_1 = require("../utils/timer");
const factory_methods_1 = require("./factory-methods");
const _1 = require(".");
buildMainInjector.inject = plugin_1.tokens(plugin_1.commonTokens.injector);
function buildMainInjector(injector) {
    const pluginResolverProvider = createPluginResolverProvider(injector);
    return pluginResolverProvider
        .provideFactory(_1.coreTokens.pluginCreatorReporter, _1.PluginCreator.createFactory(plugin_1.PluginKind.Reporter))
        .provideFactory(_1.coreTokens.pluginCreatorChecker, _1.PluginCreator.createFactory(plugin_1.PluginKind.Checker))
        .provideClass(_1.coreTokens.reporter, broadcast_reporter_1.default)
        .provideClass(_1.coreTokens.temporaryDirectory, temporary_directory_1.TemporaryDirectory)
        .provideClass(_1.coreTokens.timer, timer_1.default)
        .provideValue(_1.coreTokens.execa, execa);
}
exports.buildMainInjector = buildMainInjector;
function createPluginResolverProvider(parent) {
    return parent
        .provideValue(_1.coreTokens.validationSchema, core_1.strykerCoreSchema)
        .provideClass(_1.coreTokens.optionsValidator, config_1.OptionsValidator)
        .provideClass(_1.coreTokens.configReader, config_reader_1.default)
        .provideFactory(plugin_1.commonTokens.options, config_1.readConfig)
        .provideFactory(_1.coreTokens.pluginDescriptors, pluginDescriptorsFactory)
        .provideFactory(plugin_1.commonTokens.pluginResolver, factory_methods_1.pluginResolverFactory)
        .provideFactory(_1.coreTokens.validationSchema, config_1.buildSchemaWithPluginContributions)
        .provideClass(_1.coreTokens.optionsValidator, config_1.OptionsValidator)
        .provideFactory(plugin_1.commonTokens.options, config_1.validateOptions)
        .provideFactory(plugin_1.commonTokens.options, config_1.markUnknownOptions);
}
exports.createPluginResolverProvider = createPluginResolverProvider;
function pluginDescriptorsFactory(options) {
    options.plugins.push(require.resolve('../reporters'));
    options.plugins = options.plugins.concat(options.appendPlugins);
    return options.plugins;
}
pluginDescriptorsFactory.inject = plugin_1.tokens(plugin_1.commonTokens.options);
//# sourceMappingURL=build-main-injector.js.map