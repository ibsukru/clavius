"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutantInstrumenterExecutor = void 0;
const plugin_1 = require("@stryker-mutator/api/plugin");
const instrumenter_1 = require("@stryker-mutator/instrumenter");
const di_1 = require("../di");
const sandbox_1 = require("../sandbox/sandbox");
const concurrent_1 = require("../concurrent");
const checker_facade_1 = require("../checker/checker-facade");
const sandbox_2 = require("../sandbox");
class MutantInstrumenterExecutor {
    constructor(injector, inputFiles, options) {
        this.injector = injector;
        this.inputFiles = inputFiles;
        this.options = options;
    }
    async execute() {
        // Create the checker and instrumenter
        const instrumenter = this.injector.injectClass(instrumenter_1.Instrumenter);
        // Instrument files in-memory
        const instrumentResult = await instrumenter.instrument(this.inputFiles.filesToMutate, this.options.mutator);
        // Preprocess sandbox files
        const preprocess = this.injector.injectFunction(sandbox_2.createPreprocessor);
        const files = await preprocess.preprocess(this.replaceInstrumentedFiles(instrumentResult));
        // Initialize the checker pool
        const concurrencyTokenProviderProvider = this.injector.provideClass(di_1.coreTokens.concurrencyTokenProvider, concurrent_1.ConcurrencyTokenProvider);
        const concurrencyTokenProvider = concurrencyTokenProviderProvider.resolve(di_1.coreTokens.concurrencyTokenProvider);
        const checkerPoolProvider = concurrencyTokenProviderProvider
            .provideValue(di_1.coreTokens.checkerConcurrencyTokens, concurrencyTokenProvider.checkerToken$)
            .provideFactory(di_1.coreTokens.checkerFactory, checker_facade_1.createCheckerFactory)
            .provideFactory(di_1.coreTokens.checkerPool, concurrent_1.createCheckerPool);
        const checkerPool = checkerPoolProvider.resolve(di_1.coreTokens.checkerPool);
        await checkerPool.init();
        // Feed the sandbox
        const sandbox = await this.injector.provideValue(di_1.coreTokens.files, files).injectFunction(sandbox_1.Sandbox.create);
        return checkerPoolProvider.provideValue(di_1.coreTokens.sandbox, sandbox).provideValue(di_1.coreTokens.mutants, instrumentResult.mutants);
    }
    replaceInstrumentedFiles(instrumentResult) {
        return this.inputFiles.files.map((inputFile) => {
            const instrumentedFile = instrumentResult.files.find((instrumentedFile) => instrumentedFile.name === inputFile.name);
            if (instrumentedFile) {
                return instrumentedFile;
            }
            else {
                return inputFile;
            }
        });
    }
}
exports.MutantInstrumenterExecutor = MutantInstrumenterExecutor;
MutantInstrumenterExecutor.inject = plugin_1.tokens(plugin_1.commonTokens.injector, di_1.coreTokens.inputFiles, plugin_1.commonTokens.options);
//# sourceMappingURL=2-mutant-instrumenter-executor.js.map