import execa = require('execa');
import { StrykerOptions } from '@stryker-mutator/api/core';
import { File } from '@stryker-mutator/api/core';
import { I } from '@stryker-mutator/util';
import { LoggerFactoryMethod } from '@stryker-mutator/api/logging';
import { commonTokens } from '@stryker-mutator/api/plugin';
import { TemporaryDirectory } from '../utils/temporary-directory';
import { coreTokens } from '../di';
interface SandboxFactory {
    (options: StrykerOptions, getLogger: LoggerFactoryMethod, files: readonly File[], tempDir: I<TemporaryDirectory>, exec: typeof execa): Promise<Sandbox>;
    inject: [
        typeof commonTokens.options,
        typeof commonTokens.getLogger,
        typeof coreTokens.files,
        typeof coreTokens.temporaryDirectory,
        typeof coreTokens.execa
    ];
}
export declare class Sandbox {
    private readonly options;
    private readonly log;
    private readonly files;
    private readonly exec;
    private readonly fileMap;
    readonly workingDirectory: string;
    private constructor();
    private initialize;
    static create: SandboxFactory;
    get sandboxFileNames(): string[];
    sandboxFileFor(fileName: string): string;
    private fillSandbox;
    private runBuildCommand;
    private symlinkNodeModulesIfNeeded;
    private fillFile;
}
export {};
//# sourceMappingURL=sandbox.d.ts.map