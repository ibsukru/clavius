"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONFIG_SYNTAX_HELP = void 0;
const path = require("path");
const plugin_1 = require("@stryker-mutator/api/plugin");
const deep_merge_1 = require("@stryker-mutator/util/src/deep-merge");
const di_1 = require("../di");
const errors_1 = require("../errors");
const options_validator_1 = require("./options-validator");
const create_config_1 = require("./create-config");
exports.CONFIG_SYNTAX_HELP = `
/**
  * @type {import('@stryker-mutator/api/core').StrykerOptions}
  */
module.exports = {
  // You're options here!
}`.trim();
const DEFAULT_CONFIG_FILE = 'stryker.conf';
class ConfigReader {
    constructor(cliOptions, log, validator) {
        this.cliOptions = cliOptions;
        this.log = log;
        this.validator = validator;
    }
    readConfig() {
        const configModule = this.loadConfigModule();
        let options;
        if (typeof configModule === 'function') {
            this.log.warn('Usage of `module.export = function(config) {}` is deprecated. Please use `module.export = {}` or a "stryker.conf.json" file. For more details, see https://stryker-mutator.io/blog/2020-03-11/stryker-version-3#new-config-format');
            options = options_validator_1.defaultOptions();
            configModule(create_config_1.createConfig(options));
        }
        else {
            this.validator.validate(configModule);
            options = configModule;
        }
        // merge the config from config file and cliOptions (precedence)
        deep_merge_1.deepMerge(options, this.cliOptions);
        if (this.log.isDebugEnabled()) {
            this.log.debug(`Loaded config: ${JSON.stringify(options, null, 2)}`);
        }
        return options;
    }
    loadConfigModule() {
        let configModule = {};
        if (!this.cliOptions.configFile) {
            try {
                const configFile = require.resolve(path.resolve(`./${DEFAULT_CONFIG_FILE}`));
                this.log.info(`Using ${path.basename(configFile)}`);
                this.cliOptions.configFile = configFile;
            }
            catch (e) {
                this.log.info('No config file specified. Running with command line arguments.');
                this.log.info('Use `stryker init` command to generate your config file.');
            }
        }
        if (typeof this.cliOptions.configFile === 'string') {
            this.log.debug(`Loading config ${this.cliOptions.configFile}`);
            const configFile = this.resolveConfigFile(this.cliOptions.configFile);
            try {
                configModule = require(configFile);
            }
            catch (e) {
                this.log.info('Stryker can help you setup a `stryker.conf` file for your project.');
                this.log.info("Please execute `stryker init` in your project's root directory.");
                throw new errors_1.ConfigError('Invalid config file', e);
            }
            if (typeof configModule !== 'function' && typeof configModule !== 'object') {
                this.log.fatal('Config file must export an object!\n' + exports.CONFIG_SYNTAX_HELP);
                throw new errors_1.ConfigError('Config file must export an object!');
            }
        }
        return configModule;
    }
    resolveConfigFile(configFileName) {
        const configFile = path.resolve(configFileName);
        try {
            return require.resolve(configFile);
        }
        catch (_a) {
            throw new errors_1.ConfigError(`File ${configFile} does not exist!`);
        }
    }
}
exports.default = ConfigReader;
ConfigReader.inject = plugin_1.tokens(di_1.coreTokens.cliOptions, plugin_1.commonTokens.logger, di_1.coreTokens.optionsValidator);
//# sourceMappingURL=config-reader.js.map