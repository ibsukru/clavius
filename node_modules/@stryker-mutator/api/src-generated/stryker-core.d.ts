/**
 * This file was automatically generated by generate-json-schema-to-ts.js.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source file JSON file: stryker-core.json,
 * and run 'npm run generate' from monorepo base directory.
 */
export declare type CoverageAnalysis = 'off' | 'all' | 'perTest';
export declare type Percentage = number;
/**
 * JSON schema for the Stryker Mutator configuration file
 */
export interface StrykerOptions {
    /**
     * The 'allowConsoleColors' value indicates whether Stryker should use colors in console.
     */
    allowConsoleColors: boolean;
    /**
     * Configure a build command to run after mutating the code, but before mutants are tested. This is generally used to transpile your code before testing. Only configure this if your test runner doesn't take care of this already and you're not using just-in-time transpiler like `babel/register` or `ts-node`.
     */
    buildCommand?: string;
    /**
     * Enable checker plugins here. A checker plugin will be invoked for each mutant before it is run in a test runner. It can check to see of a given mutant is valid, by for example validate that it won't result in a type error
     */
    checkers: string[];
    /**
     * Set the concurrency of workers. Stryker will always run checkers and test runners in parallel by creating worker processes (note, not `worker_threads`). This defaults to `n-1` where `n` is the number of logical CPU cores available on your machine, unless `n <= 4`, in that case it uses `n`. This is a sane default for most use cases.
     */
    concurrency?: number;
    /**
     * Restart each forked threads after <n> runs. Not recommended unless you are experiencing memory leaks that you are unable to resolve. (default: 0)
     */
    maxTestRunnerReuse: number;
    commandRunner: CommandRunnerOptions;
    coverageAnalysis: CoverageAnalysis;
    clearTextReporter: ClearTextReporterOptions;
    dashboard: DashboardOptions;
    eventReporter: EventRecorderOptions;
    fileLogLevel: LogLevel;
    /**
     * With `files` you can choose which files should be included in your test runner sandbox.
     * This is normally not needed as it defaults to all files not ignored by git.
     * Try it out yourself with this command: `git ls-files --others --exclude-standard --cached --exclude .stryker-tmp`.
     *
     * If you do need to override `files` (for example: when your project does not live in a git repository),
     * you can override the files here.
     *
     * When using the command line, the list can only contain a comma separated list of globbing expressions.
     * When using the config file you can provide an array with `string`s
     */
    files?: string[];
    logLevel: LogLevel;
    /**
     * [DEPRECATED please use "concurrency" instead]. Specifies the maximum number of concurrent test runners to spawn. Mutation testing is time consuming. By default, Stryker tries to make the most of your CPU's, by spawning as many test runners as you have CPU cores (`Number.MAX_SAFE_INTEGER`).
     */
    maxConcurrentTestRunners: number;
    /**
     * With mutate you configure the subset of files to use for mutation testing. Generally speaking, these should be your own source files.
     */
    mutate: string[];
    mutator: MutatorDescriptor;
    /**
     * The package manager Stryker can use to install missing dependencies.
     */
    packageManager?: 'npm' | 'yarn';
    /**
     * With 'plugins', you can add additional Node modules for Stryker to load (or require). By default, all node_modules starting with @stryker-mutator/* will be loaded, so you would normally not need to specify this option. These modules should be installed right next to stryker. For a current list of plugins, you can consult 'npm' or 'stryker-mutator.io.'
     */
    plugins: string[];
    /**
     * A list of additional plugins you want Stryker to load (`require`) without overwriting the (default) `plugins`.
     */
    appendPlugins: string[];
    /**
     * With reporters, you can set the reporters for stryker to use.
     */
    reporters: string[];
    htmlReporter?: HtmlReporterOptions;
    /**
     * Configure a pattern that matches the files of which type checking has to be disabled. This is needed because Stryker will create (typescript) type errors when inserting the mutants in your code. Stryker disables type checking by inserting `// @ts-nocheck` atop those files and removing other `// @ts-xxx` directives (so they won't interfere with `@ts-nocheck`). The default setting allows these directives to be stripped from all JavaScript and friend files in `lib`, `src` and `test` directories. You can specify a different glob expression or set it to `false` to completely disable this behavior.
     */
    disableTypeChecks: false | string;
    /**
     * The 'symlinkNodeModules' value indicates whether Stryker should create a symbolic link to your current node_modules directory in the sandbox directories. This makes running your tests by Stryker behave more like your would run the tests yourself in your project directory. Only disable this setting if you really know what you are doing.
     */
    symlinkNodeModules: boolean;
    /**
     * Choose a different temp dir that Stryker uses for mutation testing. This directory will contain copies of your source code during a mutation test run. It will be created if it not exists and is *entirely deleted* after a successful run, so change this with caution.
     */
    tempDirName: string;
    /**
     * Choose whether or not to clean the temp dir (which is ".stryker-tmp" inside the current working directory by default) after a successful run. The temp dir will never be removed when the run failed for some reason (for debugging purposes)
     */
    cleanTempDir: boolean;
    /**
     * With 'testRunner' you specify the test runner that Stryker uses to run your tests. The default value is command. The command runner runs a configurable bash/cmd command and bases the result on the exit code of that program (0 for success, otherwise failed). You can configure this command via the config file using the 'commandRunner: { command: 'npm run mocha' }'. It uses 'npm test' as the command by default.
     */
    testRunner: string;
    thresholds: MutationScoreThresholds;
    /**
     * Configure the allowed timeout deviation relative to the time of a normal test run. Tweak this if you notice that mutants are prone to creating slower code, but not infinite loops (for that, use `timeoutMS`)
     */
    timeoutFactor: number;
    /**
     * Configure an absolute timeout deviation. Tweak this if you run Stryker on a busy machine and you need to wait longer to make sure that the code indeed entered an infinite loop.
     */
    timeoutMS: number;
    /**
     * Configure the (root) tsconfig file for typescript projects. This will allow Stryker to rewrite the `extends` and `references` settings in this and related tsconfig files in your sandbox. Defaults to `tsconfig.json`. This setting is also used when you enable the `@stryker-mutator/typescript-checker plugin
     */
    tsconfigFile: string;
    /**
     * Enable or disable certain warnings
     */
    warnings: boolean | WarningOptions;
    [k: string]: unknown;
}
export interface CommandRunnerOptions {
    /**
     * The command to test each mutant. For example "npm run mocha". Defaults to "npm test".
     */
    command: string;
    [k: string]: unknown;
}
export interface ClearTextReporterOptions {
    /**
     * Indicates whether or not to use color coding in output.
     */
    allowColor: boolean;
    /**
     * Indicates whether or not to log which tests were executed for a given mutant.
     */
    logTests: boolean;
    /**
     * Indicates the maximum amount of test to log when `logTests` is enabled
     */
    maxTestsToLog: number;
    [k: string]: unknown;
}
export interface DashboardOptions {
    /**
     * Indicates which project to use if the "dashboard" reporter is enabled.
     */
    project?: string;
    /**
     * Indicates which version to use if the "dashboard" reporter is enabled.
     */
    version?: string;
    /**
     * Indicates which module to use if the "dashboard" reporter is enabled.
     */
    module?: string;
    /**
     * Indicates the base url of the stryker dashboard.
     */
    baseUrl: string;
    reportType: ReportType;
}
export interface EventRecorderOptions {
    /**
     * The base dir to write the events to
     */
    baseDir: string;
}
export interface MutatorDescriptor {
    /**
     * Override the default babel plugins Stryker uses to parse your JavaScript files. The default list of plugins is extensive and normally doesn't need overriding. Stryker also loads your babel plugins by default (if you have them). If Stryker's default babel plugins conflicts with your plugins, try to override this list with an empty array.
     */
    plugins: (string | unknown[])[] | null;
    excludedMutations: string[];
}
export interface HtmlReporterOptions {
    /**
     * The output folder for the html report.
     */
    baseDir: string;
}
export interface MutationScoreThresholds {
    high: Percentage;
    low: Percentage;
    break: null | Percentage;
}
export interface WarningOptions {
    /**
     * decide whether or not to log warnings when additional stryker options are configured
     */
    unknownOptions: boolean;
    /**
     * decide whether or not to log warnings when a preprocessor error occurs. For example, when the disabling of type errors fails.
     */
    preprocessorErrors: boolean;
    [k: string]: unknown;
}
export declare const enum ReportType {
    Full = "full",
    MutationScore = "mutationScore"
}
export declare const enum LogLevel {
    Off = "off",
    Fatal = "fatal",
    Error = "error",
    Warning = "warn",
    Information = "info",
    Debug = "debug",
    Trace = "trace"
}
//# sourceMappingURL=stryker-core.d.ts.map