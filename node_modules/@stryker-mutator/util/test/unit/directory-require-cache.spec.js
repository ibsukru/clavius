"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const sinon = require("sinon");
const chai_1 = require("chai");
const src_1 = require("../../src");
describe(src_1.DirectoryRequireCache.name, () => {
    let workingDirectory;
    let sut;
    let loadedFiles;
    let rootModule;
    beforeEach(() => {
        loadedFiles = new Map();
        workingDirectory = path.join('stub', 'working', 'dir');
        const cwdStub = sinon.stub(process, 'cwd').returns(workingDirectory);
        cwdStub.returns(workingDirectory);
        sut = new src_1.DirectoryRequireCache();
        rootModule = createModule('root', 'root');
        require.cache['root'] = rootModule;
    });
    afterEach(() => {
        for (const fileName of loadedFiles.keys()) {
            delete require.cache[fileName];
        }
    });
    function fakeRequireFile(fileName, content = fileName, requiredBy = rootModule) {
        loadedFiles.set(fileName, content);
        const child = createModule(content, fileName);
        require.cache[fileName] = child;
        requiredBy.children.push(child);
    }
    describe(src_1.DirectoryRequireCache.prototype.clear.name, () => {
        it('should clear the init files', () => {
            var _a;
            // Arrange
            const dir2 = path.join('stub', 'working', 'dir2');
            const fooFileName = path.join(dir2, 'foo.js');
            const barFileName = path.join(dir2, 'bar.js');
            const bazFileName = path.join(dir2, 'baz.js');
            fakeRequireFile(fooFileName, 'foo');
            fakeRequireFile(barFileName, 'foo');
            fakeRequireFile(bazFileName, 'baz');
            sut.init({ initFiles: [fooFileName, barFileName], rootModuleId: 'root' });
            sut.record();
            // Act
            sut.clear();
            // Assert
            chai_1.expect(require.cache[fooFileName]).undefined;
            chai_1.expect(require.cache[barFileName]).undefined;
            chai_1.expect((_a = require.cache[bazFileName]) === null || _a === void 0 ? void 0 : _a.exports).eq('baz');
        });
        it('should clear recorded files', () => {
            var _a;
            // Arrange
            const dir2 = path.join('stub', 'working', 'dir2');
            const fooFileName = path.join(workingDirectory, 'foo.js');
            const barFileName = path.join(workingDirectory, 'bar.js');
            const bazFileName = path.join(dir2, 'baz.js');
            fakeRequireFile(fooFileName, 'foo');
            fakeRequireFile(barFileName, 'foo');
            fakeRequireFile(bazFileName, 'baz');
            sut.record();
            // Act
            sut.clear();
            // Assert
            chai_1.expect(require.cache[fooFileName]).undefined;
            chai_1.expect(require.cache[barFileName]).undefined;
            chai_1.expect((_a = require.cache[bazFileName]) === null || _a === void 0 ? void 0 : _a.exports).eq('baz');
        });
        it('should clear recorded children from the root', () => {
            // Arrange
            const dir2 = path.join('stub', 'working', 'dir2');
            const fooFileName = path.join(workingDirectory, 'foo.js');
            const barFileName = path.join(workingDirectory, 'bar.js');
            const bazFileName = path.join(dir2, 'baz.js');
            fakeRequireFile(fooFileName, 'foo');
            fakeRequireFile(barFileName, 'foo');
            fakeRequireFile(bazFileName, 'baz');
            chai_1.expect(rootModule.children).lengthOf(3);
            sut.init({ initFiles: [], rootModuleId: 'root' });
            sut.record();
            // Act
            sut.clear();
            // Assert
            chai_1.expect(rootModule.children).lengthOf(1);
            chai_1.expect(rootModule.children[0].filename).eq(bazFileName);
        });
        it("should throw when the root module wasn't loaded", () => {
            // Arrange
            sut.init({ initFiles: [], rootModuleId: 'not-exists' });
            sut.record();
            // Act
            chai_1.expect(() => sut.clear()).throws('Could not find "not-exists" in require cache.');
        });
        it('should not clear files from node_modules', () => {
            var _a;
            // Arrange
            const fooFileName = path.join(workingDirectory, 'foo.js');
            const bazFileName = path.join(workingDirectory, 'node_modules', 'baz.js');
            fakeRequireFile(fooFileName, 'foo');
            fakeRequireFile(bazFileName, 'baz');
            sut.record();
            // Act
            sut.clear();
            // Assert
            chai_1.expect(require.cache[fooFileName]).undefined;
            chai_1.expect((_a = require.cache[bazFileName]) === null || _a === void 0 ? void 0 : _a.exports).eq('baz');
        });
    });
});
function createModule(content, fileName) {
    return {
        exports: content,
        children: [],
        filename: fileName,
        id: fileName,
        loaded: true,
        parent: null,
        paths: [],
        require,
        path: '',
    };
}
//# sourceMappingURL=directory-require-cache.spec.js.map