"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const deep_merge_1 = require("../../src/deep-merge");
describe(deep_merge_1.deepMerge.name, () => {
    it('should merge overrides into the target object', () => {
        // Arrange
        const foo = { foo: 'bar' };
        const baz = { baz: 42 };
        // Act
        deep_merge_1.deepMerge(foo, baz);
        // Assert
        chai_1.expect(foo).deep.eq({ foo: 'bar', baz: 42 });
    });
    it('should deep merge overrides into the target object', () => {
        // Arrange
        const foo = { child: { foo: 'child' } };
        const baz = { child: { baz: 42 } };
        // Act
        deep_merge_1.deepMerge(foo, baz);
        // Assert
        const expected = { child: { foo: 'child', baz: 42 } };
        chai_1.expect(foo).deep.eq(expected);
    });
    it('should override arrays without merging them', () => {
        // Arrange
        const foo = { qux: ['1', '2'] };
        const baz = { qux: ['3'] };
        // Act
        deep_merge_1.deepMerge(foo, baz);
        // Assert
        const expected = { qux: ['3'] };
        chai_1.expect(foo).deep.eq(expected);
    });
    it('should not override with `undefined`', () => {
        // Arrange
        const foo = { foo: '1' };
        const baz = { foo: undefined };
        // Act
        deep_merge_1.deepMerge(foo, baz);
        // Assert
        const expected = { foo: '1' };
        chai_1.expect(foo).deep.eq(expected);
    });
});
//# sourceMappingURL=deep-merge.spec.js.map