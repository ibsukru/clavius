"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jestTestRunnerFactory = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@stryker-mutator/api/core");
const plugin_1 = require("@stryker-mutator/api/plugin");
const test_runner_1 = require("@stryker-mutator/api/test-runner");
const util_1 = require("@stryker-mutator/util");
const jest_test_adapters_1 = require("./jest-test-adapters");
const plugin_tokens_1 = require("./plugin-tokens");
const config_loaders_1 = require("./config-loaders");
const jest_override_options_1 = tslib_1.__importDefault(require("./jest-override-options"));
function jestTestRunnerFactory(injector) {
    return injector
        .provideValue(plugin_tokens_1.processEnvToken, process.env)
        .provideValue(plugin_tokens_1.jestVersionToken, require('jest/package.json').version)
        .provideFactory(plugin_tokens_1.jestTestAdapterToken, jest_test_adapters_1.jestTestAdapterFactory)
        .provideFactory(plugin_tokens_1.configLoaderToken, config_loaders_1.configLoaderFactory)
        .injectClass(JestTestRunner);
}
exports.jestTestRunnerFactory = jestTestRunnerFactory;
jestTestRunnerFactory.inject = plugin_1.tokens(plugin_1.commonTokens.injector);
class JestTestRunner {
    constructor(log, options, processEnvRef, jestTestAdapter, configLoader) {
        var _a;
        this.log = log;
        this.processEnvRef = processEnvRef;
        this.jestTestAdapter = jestTestAdapter;
        const jestOptions = options;
        // Get jest configuration from stryker options and assign it to jestConfig
        const configFromFile = configLoader.loadConfig();
        this.jestConfig = this.mergeConfigSettings(configFromFile, jestOptions.jest.config || {});
        // Get enableFindRelatedTests from stryker jest options or default to true
        this.enableFindRelatedTests = (_a = jestOptions.jest.enableFindRelatedTests) !== null && _a !== void 0 ? _a : true;
        if (this.enableFindRelatedTests) {
            this.log.debug('Running jest with --findRelatedTests flag. Set jest.enableFindRelatedTests to false to run all tests on every mutant.');
        }
        else {
            this.log.debug('Running jest without --findRelatedTests flag. Set jest.enableFindRelatedTests to true to run only relevant tests on every mutant.');
        }
        // basePath will be used in future releases of Stryker as a way to define the project root
        // Default to process.cwd when basePath is not set for now, should be removed when issue is solved
        // https://github.com/stryker-mutator/stryker/issues/650
        this.jestConfig.rootDir = options.basePath || process.cwd();
        this.log.debug(`Project root is ${this.jestConfig.rootDir}`);
    }
    dryRun() {
        return this.run();
    }
    async mutantRun({ activeMutant, sandboxFileName }) {
        const fileUnderTest = this.enableFindRelatedTests ? sandboxFileName : undefined;
        process.env[core_1.INSTRUMENTER_CONSTANTS.ACTIVE_MUTANT_ENV_VARIABLE] = activeMutant.id.toString();
        const dryRunResult = await this.run(fileUnderTest);
        return test_runner_1.toMutantRunResult(dryRunResult);
    }
    async run(fileUnderTest = undefined) {
        this.setEnv();
        const all = await this.jestTestAdapter.run(this.jestConfig, process.cwd(), fileUnderTest);
        return this.collectRunResult(all.results);
    }
    collectRunResult(results) {
        if (results.numRuntimeErrorTestSuites) {
            const errorMessage = results.testResults
                .map((testSuite) => this.collectSerializableErrorText(testSuite.testExecError))
                .filter(util_1.notEmpty)
                .join(', ');
            return {
                status: test_runner_1.DryRunStatus.Error,
                errorMessage,
            };
        }
        else {
            return {
                status: test_runner_1.DryRunStatus.Complete,
                tests: this.processTestResults(results.testResults),
            };
        }
    }
    collectSerializableErrorText(error) {
        return error && `${error.code && `${error.code} `}${error.message} ${error.stack}`;
    }
    setEnv() {
        // Jest CLI will set process.env.NODE_ENV to 'test' when it's null, do the same here
        // https://github.com/facebook/jest/blob/master/packages/jest-cli/bin/jest.js#L12-L14
        if (!this.processEnvRef.NODE_ENV) {
            this.processEnvRef.NODE_ENV = 'test';
        }
        // Force colors off: https://github.com/chalk/supports-color#info
        process.env.FORCE_COLOR = '0';
    }
    processTestResults(suiteResults) {
        var _a;
        const testResults = [];
        for (const suiteResult of suiteResults) {
            for (const testResult of suiteResult.testResults) {
                let result;
                let timeSpentMs = (_a = testResult.duration) !== null && _a !== void 0 ? _a : 0;
                switch (testResult.status) {
                    case 'passed':
                        result = {
                            id: testResult.fullName,
                            name: testResult.fullName,
                            status: test_runner_1.TestStatus.Success,
                            timeSpentMs,
                        };
                        break;
                    case 'failed':
                        result = {
                            id: testResult.fullName,
                            name: testResult.fullName,
                            failureMessage: testResult.failureMessages.join(', '),
                            status: test_runner_1.TestStatus.Failed,
                            timeSpentMs,
                        };
                        break;
                    default:
                        result = {
                            id: testResult.fullName,
                            name: testResult.fullName,
                            status: test_runner_1.TestStatus.Skipped,
                            timeSpentMs,
                        };
                        break;
                }
                testResults.push(result);
            }
        }
        return testResults;
    }
    mergeConfigSettings(configFromFile, config) {
        const stringify = (obj) => JSON.stringify(obj, null, 2);
        this.log.debug(`Merging file-based config ${stringify(configFromFile)} 
      with custom config ${stringify(config)}
      and default (internal) stryker config ${jest_override_options_1.default}`);
        return Object.assign(Object.assign(Object.assign({}, configFromFile), config), jest_override_options_1.default);
    }
}
exports.default = JestTestRunner;
JestTestRunner.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.options, plugin_tokens_1.processEnvToken, plugin_tokens_1.jestTestAdapterToken, plugin_tokens_1.configLoaderToken);
//# sourceMappingURL=jest-test-runner.js.map