"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = require("fs");
const path_1 = tslib_1.__importDefault(require("path"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const plugin_tokens_1 = require("../plugin-tokens");
/**
 * The Default config loader will load the Jest configuration using the package.json in the package root
 */
class CustomJestConfigLoader {
    constructor(log, options, require, projectRoot) {
        this.log = log;
        this.options = options;
        this.require = require;
        this.projectRoot = projectRoot;
    }
    loadConfig() {
        const jestConfig = this.readConfigFromJestConfigFile() || this.readConfigFromPackageJson() || {};
        return jestConfig;
    }
    readConfigFromJestConfigFile() {
        var _a;
        try {
            const jestOptions = this.options;
            const configFilePath = path_1.default.join(this.projectRoot, ((_a = jestOptions.jest) === null || _a === void 0 ? void 0 : _a.configFile) || 'jest.config.js');
            const config = this.require(configFilePath);
            this.log.debug(`Read Jest config from ${configFilePath}`);
            return config;
        }
        catch (_b) {
            /* Don't return anything (implicitly return undefined) */
        }
    }
    readConfigFromPackageJson() {
        try {
            const configFilePath = path_1.default.join(this.projectRoot, 'package.json');
            const config = JSON.parse(fs.readFileSync(configFilePath, 'utf8')).jest;
            this.log.debug(`Read Jest config from ${configFilePath}`);
            return config;
        }
        catch (_a) {
            /* Don't return anything (implicitly return undefined) */
        }
    }
}
exports.default = CustomJestConfigLoader;
CustomJestConfigLoader.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.options, plugin_tokens_1.loaderToken, plugin_tokens_1.projectRootToken);
//# sourceMappingURL=custom-jest-config-loader.js.map